/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return build(inorder, 0, inorder.size()-1,
                    postorder, 0, postorder.size()-1);
    }

    TreeNode* build(vector<int>& inorder, int in_start, int in_end,
                    vector<int>& postorder, int post_start, int post_end) {
        if  (in_start > in_end) return nullptr;
        //根节点在后序遍历中的位置是最后一个
        int root_val = postorder[post_end];

        //计算根节点在中序遍历数组中的位置
        int index = -1;
        for (int i=in_start; i<=in_end; i++) {
            if (inorder[i] == root_val) {
                index=i;
                break;
            }
        }

        //计算左子树的大小
        int left_size = index - in_start;

        //递归遍历两个数组，构造左右子树
        TreeNode *root = new TreeNode(root_val);
        root->left = build(inorder, in_start, index-1,
                            postorder, post_start,post_start+left_size-1);
        //注意：postorder最后一个元素取不到
        root->right = build(inorder, index+1, in_end,
                            postorder, post_start+left_size, post_end-1);
        
        return root;
    }
};
