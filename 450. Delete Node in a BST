/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if  (root == nullptr)  return nullptr;
        if (root->val == key) {
            //找到了，有3中情况
            //情况1：没有左子树和右子树
            // if  (root->left == nullptr && root->right == nullptr) return root;
            //情况2：只有左子树或者只有右子树
            // if  (root->left == nullptr) return root->right;
            // if  (root->right == nullptr) return root->left;
            //情况1和情况2可以合并成1种方式来处理
            if  (root->left == nullptr) return root->right;
            if  (root->right == nullptr) return root->left;
            //情况3：既有左子树或者既有右子树
            //方法1：在BST右子树中找到最小值
            if (root->left != nullptr && root->right != nullptr) {
                TreeNode *min_node = get_min(root->right);
                root->val = min_node->val;
                root->right = deleteNode(root->right, min_node->val);
            }
            //方法2：在BST左子树中找到最大值
            // TreeNode *max_node = get_max(root->left);
            // root->val = max_node->val;
            // root->left = deleteNode(root->left, max_node->val);
        }
        if  (root->val > key) {
            root->left = deleteNode(root->left, key);
        }
        if (root->val < key) {
            root->right = deleteNode(root->right, key);
        }

        return root;
    }

    //BST右子树的左边一定是最小的 
    TreeNode* get_min(TreeNode* root) {
        while (root->left != nullptr) root = root->left;
        return root;
    }

    //BST左子树中的右边一定是最大的
    TreeNode* get_max(TreeNode* root) {
        while (root->right != nullptr) root = root->right;
        return root;
    }
};
