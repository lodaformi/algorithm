#给定一个 m * n 的二维数组 board，每一个格子都可以看做是一个细胞。每个细胞都有一个初始状态：1 代表活细胞，0 代表死细胞。每个细胞与其相邻的八个位置（水平、垂直、对角线）细胞遵循以下生存规律：

#如果活细胞周围八个位置的活细胞数少于 2 个，则该位置活细胞死亡；
#如果活细胞周围八个位置有 2 个或 3 个活细胞，则该位置活细胞仍然存活；
#如果活细胞周围八个位置有超过 3 个活细胞，则该位置活细胞死亡；
#如果死细胞周围正好有 3 个活细胞，则该位置死细胞复活。
#二维数组代表的下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的的。其中细胞的出生和死亡是同时发生的。

#现在给定 m * n 的二维数组 board 的当前状态。

#要求：返回下一个状态。

class Solution(object):
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        #解题思路：
        #游戏规则：
        #该细胞是活细胞，小于两个活细胞邻居，则变为死细胞
        #该细胞是活细胞，有两个或三个活细胞邻居，状态不变
        #该细胞是活细胞，多余三个活细胞邻居，则变为死细胞
        #该细胞是死细胞，有三个活细胞邻居，则变为活细胞
        #细胞状态改变：
        #1：活细胞1->活细胞1
        #2：活细胞1->死细胞0
        #3：死细胞0->活细胞1
        #4：死细胞0->死细胞0
        #题目要求是原地改变数组，思路是先遍历一次数组，对符合条件的细胞做标记
            #1->0标记为-1，对其取绝对值还是1，不影响原来的状态，这是技巧
            #0->1标记2
            #只要值的绝对值不是1，原来的细胞就不是存活的
        #再次遍历数组
            #值为-1的细胞变成0，值为2的细胞变成1
        rows = len(board)
        cols = len(board[0])

        #以自己为原点(0,0)，8个方向的邻居
        # (-1,1)  (0,1)  (1,1)
        # (-1,0)  (0,0)  (1,0)
        # (-1,-1) (0,-1) (1,-1)
        neighs = {(-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1), (-1,0)}

        for i in range(rows):
            for j in range(cols):
                lives = 0
                for neigh in neighs:
                    newRow = i+neigh[0]
                    newCol = j+neigh[1]

                    #判断邻居的存活个数
                    if 0 <= newRow < rows and 0<= newCol < cols and abs(board[newRow][newCol]) == 1:
                        lives += 1
                if board[i][j] == 1 and (lives < 2 or lives > 3):
                    board[i][j] = -1
                elif board[i][j] == 0 and lives == 3:
                    board[i][j] = 2

        #再次遍历数组
            #值为-1的细胞变成0，值为2的细胞变成1
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == -1:
                    board[i][j] = 0
                elif board[i][j] == 2:
                    board[i][j] = 1        
