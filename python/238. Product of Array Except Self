# 给定一个数组 nums。要求输出数组 output，其中 output[i] 为数组 nums 中除了 nums[i] 之外的其他所有元素乘积。

class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        #解题思路：
        #题目要求复杂度为O(n)，则不能嵌套循环；
        #不能用除法，则不能使用遍历两次，第一次求出所有元素乘积，第二次用除法除去当前元素；况且这样子要考虑乘积是0的情况
        #解法：
        #定义一个res结果数组，大小与原数组相同
        #使用两次累乘，第一次从左向右遍历（正序遍历），将元素左侧元素的乘积放入对应位置
        #第二次从右向左（倒序遍历），将元素右侧元素的乘积放入对应位置
        #举例：nums = [a,b,c,d] res = [1,1,1,1]
        #正序累乘
        # nums  a  b   c   d
        # res   1  a  ab  abc  abcd
        # res的值其实就是left每次的值，因为1*left还是left。
        # left第一次为1，累乘造成的后移（如res的结果所示），结果就是res中存放的是nums对应位置左边元素的累乘结果（不包括自己）
        
        #倒序累乘
        #先从初始情况开始理解，nums = [a,b,c,d] res = [1,1,1,1]，先将数组倒过来，做累乘
        # nums        a    b   c   d
        # res  abcd   bcd  cd  d   1
        # res的值其实就是right每次的值，因为1*right还是right。
        #可以看到倒序累乘是把元素右边的元素相乘（不包括自己）
        
        #理解上面的逻辑后，可以在正序累乘的结果上直接做倒序累乘，就是最后结果
        
        size = len(nums)
        res = [1 for _ in range(size)]

        left = 1
        for i in range(size):
            res[i] *= left
            left *= nums[i]

        right = 1
        for i in range(size-1,-1,-1): 
            res[i] *= right
            right *= nums[i]

        return res
