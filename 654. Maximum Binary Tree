//为什么会栈溢出？？
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        //因需对数组中的元素进行操作，需定义一个新的函数
        return build(nums, 0, nums.size()-1); 
    }

    TreeNode* build(vector<int>& nums, int lo, int hi) {
        if (lo > hi) return nullptr;

        //找出最大索引和最大值
        int index = -1;
        int max = nums[lo];
        for (int i=lo; i<=hi; i++) {
            if (nums[i] > max) {
                max = nums[i];
                index = i;
            }
        }
        //新建节点
        TreeNode *root = new TreeNode(max);

        //递归遍历数组的左边
        root->left = build(nums, lo, index-1);
        //递归遍历数组的右边
        root->right = build(nums, index+1, hi);

        return root;
    }
    
        TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if (nums.size() == 0) return nullptr;

        return build(nums, 0, nums.size()-1);
    }

    //版本2
    TreeNode* build(vector<int>& nums, int startIndex, int endIndex) {
        if (startIndex > endIndex) return nullptr;
        //找最大值
        //前序遍历
        int max = -1;
        int index = -1;
        for (int i=startIndex; i<=endIndex; i++) {
            if (nums[i] > max) {
                max = nums[i];
                index = i;
            }
        }
        TreeNode* root = new TreeNode(max);

        root->left = build(nums, startIndex, index-1);
        root->right = build(nums, index+1, endIndex);

        return root;
    }
};
