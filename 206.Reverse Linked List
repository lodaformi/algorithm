/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
//递归方法
    ListNode* reverseList2(ListNode* head) {
        if  (head->next == nullptr){
            return head;
        }

        ListNode* last = reverseList(head->next);
        head->next->next = head;
        head->next = nullptr;

        return last;        
    }

//迭代方法
//翻转前N个节点
    ListNode* reverseListN(ListNode* head) {
         //定义三个指针分别指向前驱节点，当前节点，后驱节点
        ListNode *pre, *cur, *nxt;
        pre=nullptr;
        cur=head;
        nxt=head;
        //这里可以加上判断，比如反转的个数，或者判断节点的值
        while  (cur->val != 4) {
            nxt = cur->next;

            cur->next = pre;

            pre = cur;
            cur = nxt;
        }
        //反转完前几个节点后，cur指针指向了第n+1个节点，只要将链表原始头指针指向cur即可
        head->next =cur;
        return pre;
    }

    //迭代方法
    //反转整个链表
    ListNode* reverseList(ListNode* head) {
        //定义三个指针分别指向前驱节点，当前节点，后驱节点
        ListNode *pre, *cur, *nxt;
        pre=nullptr;
        cur=head;
        nxt=head;
        while  (cur != nullptr) {
            //nxt指针后移一个
            nxt = cur->next;
            //当前指针的下个节点指向前驱节点，反转指针指向
            cur->next = pre;

            //前驱指针后移
            pre = cur;
            //当前指针后移
            cur = nxt;
        }
        //返回反转后的头结点
        return pre;
    }
};
