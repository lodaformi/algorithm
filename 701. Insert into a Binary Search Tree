/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 我自己理解写出的代码，多用了两个if判断，第二三个if判断和第四五个if判断有重复，没有看答案前不知道怎么改
    // TreeNode* insertIntoBST1(TreeNode* root, int val) {
    //     if (root == nullptr) {
    //        return new TreeNode(val);
    //     }

    //     if  (val < root->val && root->left == nullptr) {
    //         root->left = new TreeNode(val);
    //         return root;
    //     }

    //     if (val > root->val && root->right == nullptr) {
    //         root->right = new TreeNode(val);
    //         return root;
    //     }

    //     if (val < root->val) {
    //         insertIntoBST(root->left, val);
    //     }

    //     if (val > root->val) {
    //         insertIntoBST(root->right, val);
    //     }

    //     return root;
    // }

    TreeNode* insertIntoBST(TreeNode* root, int val) {
        // 递归的base case，顺带把刚开始root是nullptr的情况也判断了
        if (root == nullptr) {
            return new TreeNode(val);
        }

        //题目要求说了，不会插入重复的值
        //如果val比root值小，在左子树中插入，同时用root->left接收返回值
        if (val < root->val) {
            root->left = insertIntoBST(root->left, val);
        }

        //如果val比root值大，在右子树中插入，同时用root->right接收返回值
        if (val > root->val) {
            root->right = insertIntoBST(root->right, val);
        }

        return root;
    }
};
