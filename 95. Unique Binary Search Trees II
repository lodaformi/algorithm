/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if (n == 0) {
            vector<TreeNode*> v;
	        return v;
        }

        return generateTrees(1, n);
    }

    vector<TreeNode*> generateTrees(int lo, int hi) {
        vector<TreeNode*> res;

        if (lo > hi) {
            res.push_back(nullptr);
            return res;
        }
        
        for (int i=lo; i<=hi; i++) {
            // 构建i节点（当前节点）的位置不能放到这里
            //原因：以当前节点root为根节点的BST个数是leftTree*rightTree，当两者的乘积大于1时，
            //后续建立的树会公用第一次创建出来的root节点，造成对前面的树覆盖，
            //结果是以这个节点为根的树都是一样的
            // TreeNode* root = new TreeNode(i);

            //递归拿到左子树集合
            vector<TreeNode*> leftTree = generateTrees(lo, i-1);
            //递归拿到右子树集合
            vector<TreeNode*> rightTree = generateTrees(i+1, hi);
            for (auto left : leftTree) {
                // 构建i节点（当前节点）的位置也不能放到这里
                // 原因：先考虑左子树为空的情况，但当右子树有多个（大于1）时，第二次及后续的右子树会覆盖第一次的右子树，造成右子树都一样；
                //同理：当左子树的个数也大于1时，造成左子树都不一样，右子树都一样
                // TreeNode* root = new TreeNode(i);
                for (auto right: rightTree) {
                    // 构建i节点（当前节点）的位置要放到这里
                    //以当前节点root为根节点的BST个数是leftTree*rightTree，有几种情况就建立几个root节点
                    TreeNode* root = new TreeNode(i);
                    root->left = left;
                    root->right = right;
                    
                    res.push_back(root);
                }
            }
        }

        return res;
    }
};
