/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    //方法1：反转链表，两条链表做比较
    //不管是递归反转链表还是迭代反转链表，[1,1,2,1]链表报错，问题出在哪里？？
    bool isPalindrome1(ListNode* head) {
        ListNode* newHead = reverseList1(head);
        while (head != nullptr && newHead->next != nullptr) {
            if (head->val != newHead->val) {
                return false;
            }
            head=head->next;
            newHead=newHead->next;
        }
        return true;
    }

    //方法2：使用后序遍历，空间复杂度高
    ListNode* left; //要定义为全局变量，因为两个函数要用到
    bool isPalindrome2(ListNode* head) {
        left = head;
        return tranverse(head);
    }

    bool tranverse(ListNode* right) {
        if (right == nullptr) return true;
        bool res = tranverse(right->next);
        //这条语句不理解？？？ &&后面的情况与res什么关系
        // res = res && (right->val == left->val);

        //当出栈过程中res出现false的情况，tranvers不会退出，
        //会继续出栈，这种情况怎么是怎么判断的？
        if (right->val != left->val) {
            res = false;
        }
        left = left->next;
        return res;
    }

    //方法3：反转部分链表
    bool isPalindrome(ListNode* head) {
        //第一步：使用快慢指针先找出链表的中点，分奇偶情况，奇数的话slow指针还要走一步
        ListNode *mid = findMiddle(head);
        
        //第二步：反转后半部分
        //为什么使用递归反转链表报错？？？
        ListNode* newHead = reverseList2(mid);

        //第三步：前半部分和后半部分比较，不相等就返回false
        while(newHead != nullptr) {
            if (head->val != newHead->val) {
                return false;
            }
            head = head->next;
            newHead = newHead->next;
        }
        return true;
    }

    //找链表中点
    ListNode* findMiddle(ListNode* head) {
        if (head == nullptr)  return nullptr;
        ListNode *fast, *slow;
        fast = slow = head;
        while(fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }
        //奇数的话slow指针还要走一步
        if (fast != nullptr) {
            slow = slow->next;
        }

        return slow;
    }

    //递归反转整个链表
    //在方法3中反转后半部分链表报错？为什么？
    ListNode* reverseList1(ListNode* head) {
        if (head->next == nullptr) {return head;}
        ListNode* last = reverseList1(head->next);
        head->next->next=head;
        head->next=nullptr;
        return last;
    }

    //迭代反转整个链表
    ListNode* reverseList2(ListNode* head) {
        ListNode *pre, *cur, *nxt;
        pre=nullptr;
        cur = nxt = head;
        while (cur != nullptr) {
            nxt = nxt->next;
            cur->next = pre;

            pre = cur;
            cur = nxt;
        }
        return pre;
    }
};

//版本2
ListNode* reverseKGroup(ListNode* head, int k) {
    //第一步：找到一组的开始节点和结束节点，构不成一组的话，表明到链表尾部了，结束节点为nullptr
    ListNode *start, *end;
    start = end = head;
    for (int i=0; i<k; i++) {
        //构不成一组的话，表明到链表尾部了，结束节点为nullptr
        //直接将起始节点返回即可，不用继续后面的代码了
        if (end == nullptr) {
            return head;
        }
        end = end->next;
    }
    //第二部：如果end不为nullptr，则反转这个组，[star, end)，不包括end节点
    ListNode* newHead = reverseN(start, end);
    
    
    //第三步：递归调用，前一组的结束节点指向下一组的开始节点
    head->next = reverseKGroup(end, k);

    return newHead;
}
