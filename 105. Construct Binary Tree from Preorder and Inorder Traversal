/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return build(preorder, 0, preorder.size()-1, 
                    inorder, 0, inorder.size()-1);
    }

    TreeNode* build(vector<int>& preorder, int pre_start, int pre_end,
                    vector<int>& inorder, int in_start, int in_end) {
        if (pre_start > pre_end) return nullptr;
        //在前序遍历中根节点所在位置，即为第一个
        int root_val = preorder[pre_start];

        //在中序遍历中找到根节点对应的索引，该索引前面是左子树，后面是右子树
        int index = -1;
        for (int i=in_start; i<=in_end; i++) {
            if  (inorder[i] == root_val) index = i;
        }
        //计算左子树的个数
        int left_size = index - in_start;

        //递归遍历两个数组，构造左右子树，画图理解
        TreeNode *root = new TreeNode(root_val);
        root->left = build(preorder, pre_start+1, pre_start+left_size, 
                            inorder, in_start, index-1);
        root->right = build(preorder, pre_start+left_size+1, pre_end, 
                            inorder, index+1, in_end);
        
        return root;
    }
};
