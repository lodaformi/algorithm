//镜像翻转一棵二叉树
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //指针的交换要用二级指针
    void swap(TreeNode** left, TreeNode** right) {
        TreeNode* tmp = *left;
        *left = *right;
        *right = tmp;
    }

    TreeNode* invertTree(TreeNode* root) {
        if (root == nullptr) return root;
        /**** 前序遍历位置 ****/
        //前序遍历，可以实现，从顶层向下
        // root 节点需要交换它的左右子节点
        //使用函数，指针的交换要用二级指针
        swap(&(root->left), &(root->right));

        // TreeNode* tmp = root->left;
        // root->left = root->right;
        // root->right = tmp;
        
        // 让左右子节点继续翻转它们的子节点
        invertTree(root->left);
        invertTree(root->right);

        //后序遍历，也可以实现，从底层向上
        swap(&(root->left), &(root->right));
        
        return root;
    }
};
