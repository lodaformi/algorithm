/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
      ListNode *fast=head, *slow=head;
      //当fast为nullptr时说明走到了最后一个节点的后继，也就是nullptr，此时链表节点个数为偶数，说明没有环
      //当fast不为nullptr并且fast->next为nullptr时说明走到了最后一个节点，并且最后一个节点指向nullptr，
      //此时链表节点个数为奇数，说明没有环
      while (fast != nullptr && fast->next != nullptr) {
          //慢指针走一步，快指针走两步，两者的差距在不断拉大
          slow = slow->next;
          fast = fast->next->next;
          //快慢指针相遇，有环
          if (fast == slow) {
            break;
          }
      }

      //上面while循环退出有三种情况：
      //1:fast == nullptr
      //2:fast->next == nullptr
      //3：fast == slow
      //这个if判断前两种情况，无环形成
      if (fast == nullptr || fast->next == nullptr) {
          return nullptr;
      }

      //如果上面判断失败，则证明有环，要寻找环的起点
      slow = head;
      //再次相遇时就是环的起点，具体解释看网页图解
      while (fast != slow) {
          fast = fast->next;
          slow = slow->next;
      }

      return slow;
  }
};
