/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if (root==nullptr) return;

        flatten(root->left);
        flatten(root->right);

        /***后序遍历***/
        //step one，因为后面会打乱左右子树的结果，提前保存节点的左子树和右子树
        TreeNode *left = root->left;
        TreeNode *right = root->right;

        //step two 将左子树清空，将右子树设为左子树
        root->left = nullptr;
        root->right = left;

        //step three 将右子树接到移过来的左子树上
        //从头遍历该节点
        TreeNode *pr = root;
        //遍历右子树，将指针移到最后一个节点
        //注意判断条件，不能写pr == nullptr，因为while循环执行完之后，pr已经指向了位置区域
        while (pr->right != nullptr) {
            pr = pr->right;
        }
        pr->right = right;
    }
};
