/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> res;
    unordered_map<string, int> um;
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {

        helperFunc(root);
        return res;
    }

    string helperFunc(TreeNode* root) {
        //递归的base case
        //一定要返回一个#，有利于判断
        if  (root == nullptr) return "#";
        
        string strLeft = helperFunc(root->left);
        string strRight = helperFunc(root->right);
        
        //后序遍历
        //因为stringstream可以存放任意类型的数据，所以用来存放临时数据
        stringstream ss;
        //将左右子树、分隔符和root的值存放到ss中
        //一定要加上分隔符，有利于判断
        ss << strLeft << "," << strRight << "," << root->val;
        //将ss转换为string
        string subTree = ss.str();

        //如果um中没有str，说明第一次出现
        if (um.count(subTree) == 0) {
            um[subTree] = 1;
        } 
        else if (um.count(subTree) == 1){    
            //如果um中subTree出现的次数等于1次，说明跟以前的节点重复了，取出出现的次数num
            int num = um.at(subTree);
            //如果num值为1，说明subTree是第二次出现
            if (num == 1) {
                //将root节点写入到res中
                res.push_back(root);
            }
            //将出现次数num加1，此后再次出现subTree时，会进入此判断，但是不会再将subTree写入到res中
            um[subTree] = (++num);
        } 

        return subTree;
    }
};
