/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
  ListNode* middleNode(ListNode* head) {
    ListNode *fast=head, *slow=head;
    //当fast为nullptr时说明走到了最后一个节点的后继，也就是nullptr，此时链表节点个数为偶数
    //当fast不为nullptr并且fast->next为nullptr时说明走到了最后一个节点，此时链表节点个数为奇数
    while (fast != nullptr && fast->next != nullptr) {
        //慢指针走一步，快指针走两步，两者的差距在不断拉大
        slow = slow->next;
        fast = fast->next->next;
    }
      //当为奇数时，慢指针指向中点
      //当为偶数时，链表的中点有两个，慢指针指向靠后的那一个
      return slow;
  }
};
